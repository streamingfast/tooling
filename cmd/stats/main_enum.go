// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"fmt"
	"strings"
)

const (
	// ValueKindDuration is a ValueKind of type Duration.
	ValueKindDuration ValueKind = iota
	// ValueKindNumber is a ValueKind of type Number.
	ValueKindNumber
)

var ErrInvalidValueKind = fmt.Errorf("not a valid ValueKind, try [%s]", strings.Join(_ValueKindNames, ", "))

const _ValueKindName = "DurationNumber"

var _ValueKindNames = []string{
	_ValueKindName[0:8],
	_ValueKindName[8:14],
}

// ValueKindNames returns a list of possible string values of ValueKind.
func ValueKindNames() []string {
	tmp := make([]string, len(_ValueKindNames))
	copy(tmp, _ValueKindNames)
	return tmp
}

var _ValueKindMap = map[ValueKind]string{
	ValueKindDuration: _ValueKindName[0:8],
	ValueKindNumber:   _ValueKindName[8:14],
}

// String implements the Stringer interface.
func (x ValueKind) String() string {
	if str, ok := _ValueKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ValueKind(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ValueKind) IsValid() bool {
	_, ok := _ValueKindMap[x]
	return ok
}

var _ValueKindValue = map[string]ValueKind{
	_ValueKindName[0:8]:  ValueKindDuration,
	_ValueKindName[8:14]: ValueKindNumber,
}

// ParseValueKind attempts to convert a string to a ValueKind.
func ParseValueKind(name string) (ValueKind, error) {
	if x, ok := _ValueKindValue[name]; ok {
		return x, nil
	}
	return ValueKind(0), fmt.Errorf("%s is %w", name, ErrInvalidValueKind)
}

// MarshalText implements the text marshaller method.
func (x ValueKind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ValueKind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseValueKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
